plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.9, quantile_1), col = "orange")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
plot(cdf_seq)
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq)
plot(cdf_seq, sin(cdf_seq))
plot(cdf_seq, 0.3*sin(cdf_seq))
plot(cdf_seq, cos(cdf_seq))
plot(cdf_seq, sin(4 * pi * cdf_seq))
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq))
abline(v = c(0.97, 1))
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq))
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq) + 1)
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq))
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
plot(cdf_seq, sin(4 * pi * cdf_seq), type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(200 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(8 * pi * cdf_seq)
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(8 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_arbitrary_guess_correct_area_1 <- cdf_arbitrary_guess + 1
plot(cdf_seq, cdf_arbitrary_guess_correct_area_1, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq[90:100], cdf_arbitrary_guess[90:100], type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq[90:100], cdf_arbitrary_guess[90:100], type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- 2 * pi * (cdf_seq - 0.97) / 0.3
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- sin(2 * pi * (cdf_seq - 0.97) / 0.3)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_density_orange <- 2 * pi * (cdf_seq - 0.97) / 0.3
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_density_orange
cdf_density_orange[9700:]
cdf_density_orange[9700:10000]
cdf_density_orange[9950:10000]
# we want: sin
cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.3) + 1
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
# Set the parameters
amplitude <- 0.015  # Amplitude of the sine wave
frequency <- 2 * pi  # Frequency of the sine wave
phase <- pi/2        # Phase shift of the sine wave
# Generate x values
x <- seq(0, 2 * pi, length.out = 1000)
# Generate the sine wave with the desired properties
sine_wave <- 1 + amplitude * sin(frequency * x + phase)
# Plot the sine wave
plot(x, sine_wave, type = "l", col = "blue",
xlab = "Time", ylab = "Amplitude",
main = "Sine Wave with Average Value of 1")
# Add horizontal lines at 0.97 and 1 for reference
abline(h = c(0.97, 1), col = c("red", "green"), lty = c(2, 2))
# Add legend
legend("topright", legend = c("Sine Wave", "0.97", "1"),
col = c("blue", "red", "green"), lty = c(1, 2, 2))
# TODO: consider using a theoretical distribution
n <- 100000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: ggplot2
alpha_x = 0.9
beta_x = 3.4
x_seq <- seq(0, 1, length = 100)
x_density <- dbeta(x_seq, alpha_x, beta_x)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
x <- seq(-5, 5, 0.01)
fx <- (x > -0.326 & x <0.625) * 0.632 +
(x > -1.793 & x < -1.304) * 0.454 +
(x > 1.630 & x < 2.119) * 0.227
plot(x, fx)
# TODO: consider using a theoretical distribution
n <- 100000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: ggplot2
alpha_x = 0.9
beta_x = 3.4
x_seq <- seq(0, 1, length = 100)
x_density <- dbeta(x_seq, alpha_x, beta_x)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Unknown Density of X", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l", xlab = "Y = F(X)", ylab = "Density", main = "Unknown Density of Y = F(X)")
abline(v = c(0.97, 1), col = "orange")
# TODO: consider using a theoretical distribution
n <- 100000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: ggplot2
alpha_x = 0.9
beta_x = 3.4
x_seq <- seq(0, 1, length = 100)
x_density <- dbeta(x_seq, alpha_x, beta_x)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Unknown Density of X", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l", xlab = "Y = F(X)", ylab = "Density", main = "Unknown Density of Y = F(X)")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_density_orange <- (2 * pi * (sin(cdf_seq) - 0.97) / 0.3) + 1
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
# cdf_density_orange <-
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_density_orange <- sin(2 * pi / 0.003 * cdf_seq)
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_density_orange <- sin(2 * pi / 0.003 * cdf_seq)
plot(cdf_seq[9000:], cdf_density_orange[9000:], type = "l")
cdf_seq[9000:]
rnorm(1000)[300:]
# we want: sin
cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_density_orange <- sin(2 * pi / 0.003 * cdf_seq)
plot(cdf_seq[9000:10000], cdf_density_orange[9000:10000], type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.001)
cdf_density_orange <- sin(2 * pi / 0.003 * cdf_seq_orange)
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.001)
cdf_density_orange <- sin(2 * pi / 0.003 * cdf_seq_orange) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
?abline
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.001)
cdf_density_orange <- sin(2 * pi / 0.003 * cdf_seq_orange) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange")
abline(v = c(0.97, 1), col = "orange")
mean(cdf_density_orange)
# Define the sine-like function
sine_like_function <- function(x) {
amplitude <- 0.5  # Adjust the amplitude as needed
frequency <- 2 * pi / 0.06  # Adjust the frequency as needed
mean_value <- 1  # Mean value you want over the interval
amplitude * sin(frequency * (x - 0.97)) + mean_value
}
# Create a sequence of x values in the specified interval
x_values <- seq(0.97, 1, length.out = 1000)
# Calculate y values using the sine-like function
y_values <- sine_like_function(x_values)
# Plot the sine-like function
plot(x_values, y_values, type = "l", col = "blue", lwd = 2, xlab = "x", ylab = "y",
main = "Sine-like Function with Mean 1 over [0.97, 1]")
# Add a horizontal line at y = 1 for reference
abline(h = 1, col = "red", lty = 2)
# Add grid lines for better visualization
grid()
# Define the sine-like function
sine_like_function <- function(x) {
amplitude <- 0.5  # Adjust the amplitude as needed
frequency <- 2 * pi / (1/20)  # Adjust the frequency for a period of 1/20 of the interval
mean_value <- 1  # Mean value you want over the interval
amplitude * sin(frequency * (x - 0.97)) + mean_value
}
# Create a sequence of x values in the specified interval
x_values <- seq(0.97, 1, length.out = 1000)
# Calculate y values using the sine-like function
y_values <- sine_like_function(x_values)
# Plot the sine-like function
plot(x_values, y_values, type = "l", col = "blue", lwd = 2, xlab = "x", ylab = "y",
main = "Sine-like Function with Mean 1 over [0.97, 1] and Period of 1/20 of the Interval")
# Add a horizontal line at y = 1 for reference
abline(h = 1, col = "red", lty = 2)
# Add grid lines for better visualization
grid()
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin(2 * pi / 0.0015 * cdf_seq_orange) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange")
abline(v = c(0.97, 1), col = "orange")
mean(cdf_density_orange)
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin((2 * pi / 0.0015 * cdf_seq_orange) - 0.97) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange")
abline(v = c(0.97, 1), col = "orange")
mean(cdf_density_orange)
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.001)
cdf_density_orange <- sin((2 * pi / 0.015 * cdf_seq_orange) - 0.97) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin((2 * pi / 0.015 * cdf_seq_orange) - 0.97) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange")
abline(v = c(0.97, 1), col = "orange")
cdf_density_orange
cdf_density_orange[len(cdf_density_orange)]
cdf_density_orange[length(cdf_density_orange)]
?abline
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin((2 * pi / 0.015 * cdf_seq_orange) - 0.97) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
cdf_density_orange[1]
cdf_density_orange[length(cdf_density_orange)]
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l")
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
# Define the sine-like function
sine_like_function <- function(x) {
amplitude <- 0.5  # Adjust the amplitude as needed
frequency <- 2 * pi / (1/20)  # Adjust the frequency for a period of 1/20 of the interval
mean_value <- 1  # Mean value you want over the interval
amplitude * sin(frequency * (x - 0.97)) + mean_value
}
# Create a sequence of x values in the specified interval
x_values <- seq(0.97, 1, length.out = 1000)
# Calculate y values using the sine-like function
y_values <- sine_like_function(x_values)
# Plot the sine-like function
plot(x_values, y_values, type = "l", col = "blue", lwd = 2, xlab = "x", ylab = "y",
main = "Sine-like Function with Mean 1 over [0.97, 1] and Period of 1/20 of the Interval")
# Add a horizontal line at y = 1 for reference
abline(h = 1, col = "red", lty = 2)
# Add grid lines for better visualization
grid()
?plot
# we want: sin
# cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
fx <- (x > -0.326 & x <0.625) * 0.632 +
(x > -1.793 & x < -1.304) * 0.454 +
(x > 1.630 & x < 2.119) * 0.227
plot(cdf_seq_orange, cdf_density_orange, type = "l", xlim = c(0, 1))
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
# cdf_density_orange <- (1/4) * (2 * pi * (cdf_seq - 0.97) / 0.03) + 1
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
fx <- (x > -0.326 & x <0.625) * 0.632 +
(x > -1.793 & x < -1.304) * 0.454 +
(x > 1.630 & x < 2.119) * 0.227
plot(cdf_seq_orange, cdf_density_orange, type = "l", xlim = c(0, 1))
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- (1/4) * sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
fx <- (x > -0.326 & x <0.625) * 0.632 +
(x > -1.793 & x < -1.304) * 0.454 +
(x > 1.630 & x < 2.119) * 0.227
plot(cdf_seq_orange, cdf_density_orange, type = "l", xlim = c(0, 1))
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- (1/4) * sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
fx <- (x > -0.326 & x <0.625) * 0.632 +
(x > -1.793 & x < -1.304) * 0.454 +
(x > 1.630 & x < 2.119) * 0.227
plot(cdf_seq_orange, cdf_density_orange, type = "l", xlim = c(0, 1), ylim = c(0, 1.5))
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
rm(list = ls())
# TODO: consider using a theoretical distribution
n <- 100000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: ggplot2
alpha_x = 0.9
beta_x = 3.4
x_seq <- seq(0, 1, length = 100)
x_density <- dbeta(x_seq, alpha_x, beta_x)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Unknown Density of X", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l", xlab = "Y = F(X)", ylab = "Density", main = "Unknown Density of Y = F(X)")
abline(v = c(0.97, 1), col = "orange")
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- (1/4) * sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
fx <- (x > -0.326 & x <0.625) * 0.632 +
(x > -1.793 & x < -1.304) * 0.454 +
(x > 1.630 & x < 2.119) * 0.227
plot(cdf_seq_orange, cdf_density_orange, type = "l", xlim = c(0, 1), ylim = c(0, 1.5))
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
?abline
install.packages("refund")
setwd("~")
devtools::install_github("refunders/refund", ref="devel")
setwd("~/open_source")
devtools::install_github("refunders/refund", ref="devel")
View(japanesePines)
?plot
?seq_len
cdf_seq_0.2_0.3 = seq(0.2, 0.3, by = 0.001)
cdf_seq_0.6_0.605 = seq(0.6, 0.605, by = 0.001)
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_seq_orange
?segments
alpha_x = 0.9
beta_x = 3.4
x_seq <- seq(0, 1, length = 100)
x_density <- dbeta(x_seq, alpha_x, beta_x)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "X", ylab = "Density", main = "Density of X")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "X", ylab = "Density", main = "Density of X")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l",
xlab = "Y = F(X)", ylab = "Density", main = "Unknown density of Y = F(X)",
xlim = c(0, 1), ylim = c(0, 1.5))
abline(v = c(0.97, 1), col = "orange")
cdf_seq_orange <- seq(0.97, 1, by = 0.0001)
cdf_density_orange <- (1/4) * sin(2 * pi / 0.015 * (cdf_seq_orange - 0.97)) + 1
plot(cdf_seq_orange, cdf_density_orange, type = "l", xlim = c(0, 1), ylim = c(0, 1.5),
main = "The top 3% of the unknown density of Y", xlab = "Value of the CDF of X", ylab = "Density")
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
cdf_density_known = rep(1, times = length(cdf_seq_orange))
plot(cdf_seq_orange, cdf_density_known, type = "l", xlim = c(0, 1), ylim = c(0, 1.5), lwd = 2.5,
main = "The top 3% of the unknown density of Y", xlab = "Value of the CDF of X", ylab = "Density")
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
# abline(h = mean(cdf_density_orange), xmin = 0.97, xmax = 1)
plot(cdf_seq_orange, cdf_density_known, type = "l", xlim = c(0, 1), ylim = c(0, 1.5), lwd = 2.5,
main = "Some more parts of the density of Y", xlab = "Value of the CDF of X", ylab = "Density")
segments(0.2, 1, 0.47, 1, lwd = 2.5)
segments(0.6, 1, 0.605, 1, lwd = 2.5)
abline(h = mean(cdf_density_orange), col = "orange", lty = "dashed")
abline(v = c(0.97, 1), col = "orange")
