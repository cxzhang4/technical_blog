cut_x <- cut(x, breaks = -4:4)
any(is.na(cut_x))
set.seed(34567)
n <- 10000
x <- rnorm(n, mean = 0, sd = 1)
hist(x)
?rnorm
pnorm(1)
pnorm(-1)
yo
n <- 100000
x1 <- rnorm(n, mean = 10, sd = 2)
x2 <- rnorm(n, mean = 6.7, sd = 3)
x3 <- rnorm(n, mean = -20, sd = 10)
x <- c(x1, x2, x3)
hist(x)
n <- 10000
mu = 6.3
sigma = 2.4
x <- rnorm(10000, mu, sigma)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 2.4
n_2 <- 10000
mu_2 <- 3.1
sigma_2 <- 1.7
x1 <- rnorm(n_1, mu_2, sigma_2)
x2 <- rnorm(n_2, mu_2, sigma_2)
s2
x2
x1 + x2
hist(x1 + x2)
hist(x)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 2.4
n_2 <- 10000
mu_2 <- 2.3
sigma_2 <- 1.7
x1 <- rnorm(n_1, mu_2, sigma_2)
x2 <- rnorm(n_2, mu_2, sigma_2)
x <- x1 + x2
# TODO: plot the histogram using ggplot2
hist(x)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 1.6
n_2 <- 10000
mu_2 <- 2.3
sigma_2 <- 1.2
x1 <- rnorm(n_1, mu_2, sigma_2)
x2 <- rnorm(n_2, mu_2, sigma_2)
x <- x1 + x2
# TODO: plot the histogram using ggplot2
hist(x)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 1.6
n_2 <- 10000
mu_2 <- -2.3
sigma_2 <- 1.2
x1 <- rnorm(n_1, mu_2, sigma_2)
x2 <- rnorm(n_2, mu_2, sigma_2)
x <- x1 + x2
# TODO: plot the histogram using ggplot2
hist(x)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 1.6
n_2 <- 10000
mu_2 <- 22.3
sigma_2 <- 1.2
x1 <- rnorm(n_1, mu_1, sigma_1)
x2 <- rnorm(n_2, mu_2, sigma_2)
x <- x1 + x2
# TODO: plot the histogram using ggplot2
hist(x)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 1.6
n_2 <- 10000
mu_2 <- -2.3
sigma_2 <- 1.2
x1 <- rnorm(n_1, mu_1, sigma_1)
x2 <- rnorm(n_2, mu_2, sigma_2)
x <- x1 + x2
# TODO: plot the histogram using ggplot2
hist(x)
n_1 <- 10000
mu_1 = 6.3
sigma_1 = 1.6
n_2 <- 10000
mu_2 <- -5.3
sigma_2 <- 1.2
x1 <- rnorm(n_1, mu_1, sigma_1)
x2 <- rnorm(n_2, mu_2, sigma_2)
x <- x1 + x2
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
mu_1 = 6.3
sigma_1 = 1.6
x_1 <- rnorm(n_1, mu_1, sigma_1)
mu_2 <- -5.3
sigma_2 <- 1.2
x_2 <- rnorm(n_2, mu_2, sigma_2)
alpha_3 <- 2.2
beta_3 <- 6.8
x_3 <- rbeta(n_3, alpha_3, beta_3)
n <- 10000
mu_1 = 6.3
sigma_1 = 1.6
x_1 <- rnorm(n_1, mu_1, sigma_1)
mu_2 <- -5.3
sigma_2 <- 1.2
x_2 <- rnorm(n_2, mu_2, sigma_2)
alpha_3 <- 2.2
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
# TODO: plot the histogram using ggplot2
hist(x_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x_3)
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
mu_1 = 0.5
sigma_1 = 1.6
x_1 <- rnorm(n_1, mu_1, sigma_1)
mu_2 <- -5.3
sigma_2 <- 1.2
x_2 <- rnorm(n_2, mu_2, sigma_2)
alpha_3 <- 2.2
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
alpha_3 <- 3.5
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
# TODO: plot the histogram using ggplot2
hist(x_3)
n <- 10000
mu_1 = 0.5
sigma_1 = 1.6
x_1 <- rnorm(n_1, mu_1, sigma_1)
mu_2 <- -5.3
sigma_2 <- 1.2
x_2 <- rnorm(n_2, mu_2, sigma_2)
alpha_3 <- 3.5
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x_3)
n <- 10000
mu_1 = 0.5
sigma_1 = 1.6
x_1 <- rnorm(n_1, mu_1, sigma_1)
mu_2 <- -5.3
sigma_2 <- 1.2
x_2 <- rnorm(n_2, mu_2, sigma_2)
alpha_3 <- 3.5
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: plot the histogram using ggplot2
hist(x_3)
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
mu_1 = 0.5
sigma_1 = 1.6
x_1 <- rnorm(n, mu_1, sigma_1)
alpha_3 <- 3.5
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
mu_1 = 0.5
sigma_1 = 0.7
x_1 <- rnorm(n, mu_1, sigma_1)
alpha_3 <- 3.5
beta_3 <- 6.8
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
mu_1 = 0.5
sigma_1 = 0.7
x_1 <- rnorm(n, mu_1, sigma_1)
alpha_3 <- 0.5
beta_3 <- 0.5
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
# TODO: plot the histogram using ggplot2
hist(x_3)
n <- 10000
mu_1 = 1.8
sigma_1 = 0.7
x_1 <- rnorm(n, mu_1, sigma_1)
alpha_3 <- 0.5
beta_3 <- 0.5
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x_3)
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
mu_1 = 1.8
sigma_1 = 0.7
x_1 <- rnorm(n, mu_1, sigma_1)
alpha_3 <- 0.5
beta_3 <- 0.5
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
# TODO: plot the histogram using ggplot2
hist(x_3)
n <- 10000
mu_1 = -1.8
sigma_1 = 0.7
x_1 <- rnorm(n, mu_1, sigma_1)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_3
# TODO: plot the histogram using ggplot2
hist(x_3)
# TODO: plot the histogram using ggplot2
hist(x)
n <- 10000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
n <- 100000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: plot the histogram using ggplot2
hist(x)
?dbeta
alpha = 0.9
beta = 3.4
x_seq <- seq(0, 1, length = 100)
dbeta(x_seq, alpha, beta)
lines(beta_density)
beta_density <- dbeta(x_seq, alpha, beta)
lines(beta_density)
beta_density
plot()
lines(beta_density)
plot()
plot(x_seq)
lines(beta_density)
x <- rbeta(n, alpha ,beta)
x_density <- dbeta(x_seq, alpha, beta)
plot(x_seq)
lines(beta_density)
hist(x_seq)
hist(x)
hist(x)
lines(beta_density)
```
alpha = 0.9
beta = 3.4
x_seq <- seq(0, 1, length = 100)
x <- rbeta(n, alpha ,beta)
x_density <- dbeta(x_seq, alpha, beta)
hist(x)
lines(x_density)
density(x)
x_density
plot(density(x))
plot(x_seq, x_density)
alpha = 0.9
beta = 3.4
x_seq <- seq(0, 1, length = 100)
x <- rbeta(n, alpha ,beta)
x_density <- dbeta(x_seq, alpha, beta)
plot(x_seq, x_density)
plot(x_seq, x_density, type = "l")
?plot
plot(x_seq, x_density, type = "l", lty = 2)
plot(x_seq, x_density, type = "l", lty = 1)
plot(x_seq, x_density, type = "l", lty = 3)
plot(x_seq, x_density, type = "l", lty = 1)
?qnorm
qnorm(0.9)
alpha = 0.9
beta = 3.4
x_seq <- seq(0, 1, length = 100)
x <- rbeta(n, alpha ,beta)
x_density <- dbeta(x_seq, alpha, beta)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown density")
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
rm(list = ls())
# TODO: consider using a theoretical distribution
n <- 100000
alpha_1 <- 6
beta_1 <- 1.3
x_1 <- rbeta(n, alpha_1, beta_1)
alpha_2 <- 0.8
beta_2 <- 3.3
x_2 <- rbeta(n, alpha_2, beta_2)
alpha_3 <- 0.6
beta_3 <- 0.4
x_3 <- rbeta(n, alpha_3, beta_3)
x <- x_1 + x_2 + x_3
# TODO: ggplot2
alpha_x = 0.9
beta_x = 3.4
x_seq <- seq(0, 1, length = 100)
x_density <- dbeta(x_seq, alpha_x, beta_x)
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
?abline
quantile_0.9 <- qbeta(0.9, alpha_x, beta_x)
quantile_1 <- 1
abline(v = c(quantile_0.9, quantile_1))
quantile_0.9 <- qbeta(0.9, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.9, quantile_1))
abline(v = c(quantile_0.9, quantile_1), col = "orange")
quantile_0.9 <- qbeta(0.9, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.9, quantile_1), col = "orange")
quantile_0.95 <- qbeta(0.95, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.95, quantile_1), col = "orange")
quantile_0.9 <- qbeta(0.9, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.9, quantile_1), col = "orange")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
quantile_0.97 <- qbeta(0.97, alpha_x, beta_x)
quantile_1 <- 1
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
plot(cdf_seq)
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq)
plot(cdf_seq, sin(cdf_seq))
plot(cdf_seq, 0.3*sin(cdf_seq))
plot(cdf_seq, cos(cdf_seq))
plot(cdf_seq, sin(4 * pi * cdf_seq))
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq))
abline(v = c(0.97, 1))
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq))
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq) + 1)
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
plot(cdf_seq, sin(4 * pi * cdf_seq))
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
plot(cdf_seq, sin(4 * pi * cdf_seq), type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(200 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(8 * pi * cdf_seq)
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(8 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_arbitrary_guess_correct_area_1 <- cdf_arbitrary_guess + 1
plot(cdf_seq, cdf_arbitrary_guess_correct_area_1, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 100)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq[90:100], cdf_arbitrary_guess[90:100], type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq[90:100], cdf_arbitrary_guess[90:100], type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
plot(x_seq, x_density, type = "l", lty = 1,
xlab = "Quantile", ylab = "Density", main = "Unknown Density")
abline(v = c(quantile_0.97, quantile_1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(20 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
# TODO: plot a function s.t. this plot denotes a valid CDF
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- 2 * pi * (cdf_seq - 0.97) / 0.3
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- sin(2 * pi * (cdf_seq - 0.97) / 0.3)
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_seq <- seq(0, 1, length = 10000)
cdf_arbitrary_guess <- (1/4) * sin(2 * pi * cdf_seq) + 1
plot(cdf_seq, cdf_arbitrary_guess, type = "l")
abline(v = c(0.97, 1), col = "orange")
# we want: sin
cdf_density_orange <- 2 * pi * (cdf_seq - 0.97) / 0.3
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
cdf_density_orange
cdf_density_orange[9700:]
cdf_density_orange[9700:10000]
cdf_density_orange[9950:10000]
# we want: sin
cdf_density_orange <- (2 * pi * (cdf_seq - 0.97) / 0.3) + 1
plot(cdf_seq, cdf_density_orange, type = "l")
abline(v = c(0.97, 1), col = "orange")
# Set the parameters
amplitude <- 0.015  # Amplitude of the sine wave
frequency <- 2 * pi  # Frequency of the sine wave
phase <- pi/2        # Phase shift of the sine wave
# Generate x values
x <- seq(0, 2 * pi, length.out = 1000)
# Generate the sine wave with the desired properties
sine_wave <- 1 + amplitude * sin(frequency * x + phase)
# Plot the sine wave
plot(x, sine_wave, type = "l", col = "blue",
xlab = "Time", ylab = "Amplitude",
main = "Sine Wave with Average Value of 1")
# Add horizontal lines at 0.97 and 1 for reference
abline(h = c(0.97, 1), col = c("red", "green"), lty = c(2, 2))
# Add legend
legend("topright", legend = c("Sine Wave", "0.97", "1"),
col = c("blue", "red", "green"), lty = c(1, 2, 2))
